<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Richard Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-27T04:00:00.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Richard You</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React-Responsive 用法</title>
    <link href="http://example.com/2023/05/27/React-Responsive%20%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2023/05/27/React-Responsive%20%E7%94%A8%E6%B3%95/</id>
    <published>2023-05-27T04:00:00.000Z</published>
    <updated>2023-05-27T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><ul><li>React Responsive是React的用于响应式设计的媒体查询组件。该模块非常简单，用户只需要指定一组要求，如果满足这些要求，则将渲染子项。还可以根据页面窗口的调整而改变。</li></ul><h1 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h1><h2 id="1-使用-Hooks-的方式"><a href="#1-使用-Hooks-的方式" class="headerlink" title="1. 使用 Hooks 的方式"></a>1. 使用 Hooks 的方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useMediaQuery &#125; <span class="keyword">from</span> <span class="string">&#x27;react-responsive&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Example</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> isDesktopOrLaptop = <span class="title function_">useMediaQuery</span>(&#123;</span><br><span class="line">    <span class="attr">query</span>: <span class="string">&#x27;(min-device-width: 1224px)&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> isBigScreen = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">query</span>: <span class="string">&#x27;(min-device-width: 1824px)&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> isTabletOrMobile = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">query</span>: <span class="string">&#x27;(max-width: 1224px)&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> isTabletOrMobileDevice = <span class="title function_">useMediaQuery</span>(&#123;</span><br><span class="line">    <span class="attr">query</span>: <span class="string">&#x27;(max-device-width: 1224px)&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> isPortrait = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">query</span>: <span class="string">&#x27;(orientation: portrait)&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> isRetina = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">query</span>: <span class="string">&#x27;(min-resolution: 2dppx)&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Device Test!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isDesktopOrLaptop &amp;&amp; <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>You are a desktop or laptop<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;isBigScreen &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>You also have a huge screen<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;isTabletOrMobile &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>You are sized like a tablet or mobile phone though<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span>&#125;</span><br><span class="line">      &#123;isTabletOrMobileDevice &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You are a tablet or mobile phone<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;</span><br><span class="line">      &lt;p&gt;<span class="title class_">Your</span> are <span class="keyword">in</span> &#123;isPortrait ? <span class="string">&#x27;portrait&#x27;</span> : <span class="string">&#x27;landscape&#x27;</span>&#125; orientation&lt;/p&gt;</span><br><span class="line">      &#123;isRetina &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You are retina<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-使用组件的方式"><a href="#2-使用组件的方式" class="headerlink" title="2. 使用组件的方式"></a>2. 使用组件的方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MediaQuery</span> <span class="keyword">from</span> <span class="string">&#x27;react-responsive&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Example</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Device Test!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">MediaQuery</span> <span class="attr">minDeviceWidth</span>=<span class="string">&#123;1224&#125;</span> <span class="attr">device</span>=<span class="string">&#123;&#123;</span> <span class="attr">deviceWidth:</span> <span class="attr">1600</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You are a desktop or laptop<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MediaQuery</span> <span class="attr">minDeviceWidth</span>=<span class="string">&#123;1824&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>You also have a huge screen<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">MediaQuery</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MediaQuery</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">MediaQuery</span> <span class="attr">minResolution</span>=<span class="string">&#x27;2dppx&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* You can also use a function (render prop) as a child */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;(matches) =&gt;</span></span><br><span class="line"><span class="language-xml">        matches</span></span><br><span class="line"><span class="language-xml">          ? <span class="tag">&lt;<span class="name">p</span>&gt;</span>You are retina<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          : <span class="tag">&lt;<span class="name">p</span>&gt;</span>You are not retina<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MediaQuery</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="3-API"><a href="#3-API" class="headerlink" title="3. API"></a>3. API</h1><h2 id="1-使用属性"><a href="#1-使用属性" class="headerlink" title="1. 使用属性"></a>1. 使用属性</h2><ul><li>为了适应react，你可以使用驼峰格式来构造media查询(如使用minDeviceWidth 代替 min-device-width)。作为缩写，任何数字都会添加’px’单位 <strong><code>(1234 </code></strong> -&gt; <strong><code>&#39;1234px&#39;) </code></strong> 。上面的写法可以改为下面的写法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useMediaQuery &#125; <span class="keyword">from</span> <span class="string">&#x27;react-responsive&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Example</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> isDesktopOrLaptop = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">minDeviceWidth</span>: <span class="number">1224</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> isBigScreen = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">minDeviceWidth</span>: <span class="number">1824</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> isTabletOrMobile = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">maxWidth</span>: <span class="number">1224</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> isTabletOrMobileDevice = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">maxDeviceWidth</span>: <span class="number">1224</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> isPortrait = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">orientation</span>: <span class="string">&#x27;portrait&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> isRetina = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">minResolution</span>: <span class="string">&#x27;2dppx&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-onChange"><a href="#2-onChange" class="headerlink" title="2. onChange"></a>2. onChange</h2><ul><li>可以使用<code>onChange</code>回调来指定当media 查询的值更改时将调用的更改处理程序。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useMediaQuery &#125; <span class="keyword">from</span> <span class="string">&#x27;react-responsive&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Example</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMediaQueryChange</span> = (<span class="params">matches</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// matches will be true or false based on the value for the media query</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> isDesktopOrLaptop = <span class="title function_">useMediaQuery</span>(</span><br><span class="line">    &#123; <span class="attr">minDeviceWidth</span>: <span class="number">1224</span> &#125;, <span class="literal">undefined</span>,  handleMediaQueryChange</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MediaQuery</span> <span class="keyword">from</span> <span class="string">&#x27;react-responsive&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Example</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMediaQueryChange</span> = (<span class="params">matches</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// matches will be true or false based on the value for the media query</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MediaQuery</span> <span class="attr">minDeviceWidth</span>=<span class="string">&#123;1224&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleMediaQueryChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MediaQuery</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="4-简易模式"><a href="#4-简易模式" class="headerlink" title="4. 简易模式"></a>4. 简易模式</h1><ul><li>如下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMediaQuery &#125; <span class="keyword">from</span> <span class="string">&#x27;react-responsive&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Desktop</span> = (<span class="params">&#123; children &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> isDesktop = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">minWidth</span>: <span class="number">992</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> isDesktop ? children : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Tablet</span> = (<span class="params">&#123; children &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> isTablet = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">minWidth</span>: <span class="number">768</span>, <span class="attr">maxWidth</span>: <span class="number">991</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> isTablet ? children : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Mobile</span> = (<span class="params">&#123; children &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> isMobile = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">maxWidth</span>: <span class="number">767</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> isMobile ? children : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params">&#123; children &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> isNotMobile = <span class="title function_">useMediaQuery</span>(&#123; <span class="attr">minWidth</span>: <span class="number">768</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> isNotMobile ? children : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Example</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Desktop</span>&gt;</span>Desktop or laptop<span class="tag">&lt;/<span class="name">Desktop</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Tablet</span>&gt;</span>Tablet<span class="tag">&lt;/<span class="name">Tablet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Mobile</span>&gt;</span>Mobile<span class="tag">&lt;/<span class="name">Mobile</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Default</span>&gt;</span>Not mobile (desktop or laptop or tablet)<span class="tag">&lt;/<span class="name">Default</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;React Responsive是React的用于响应式设计的媒体查询组件。该模块非常简单，用户只需要指定一</summary>
      
    
    
    
    
    <category term="React-Responsive" scheme="http://example.com/tags/React-Responsive/"/>
    
  </entry>
  
  <entry>
    <title>Shopify开发之Liquid对象</title>
    <link href="http://example.com/2023/04/12/Shopify%E5%BC%80%E5%8F%91%E4%B9%8BLiquid%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2023/04/12/Shopify%E5%BC%80%E5%8F%91%E4%B9%8BLiquid%E5%AF%B9%E8%B1%A1/</id>
    <published>2023-04-12T04:00:00.000Z</published>
    <updated>2023-04-12T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li>Liquid 对象包含在页面上输出动态内容的属性。</li><li>Liquid 对象是主题主要数据来源。（其他方式如ajax也可以获取数据）</li><li>Liquid 中包括80多个对象。</li><li>Liquid 对象通常也称为 Liquid 变量。</li><li>Liquid 对象有三大类型：全局对象、内容对象、其他对象。</li></ul><h3 id="1-全局对象"><a href="#1-全局对象" class="headerlink" title="1. 全局对象"></a>1. 全局对象</h3><p>全局对象可以在主题的任何文件中使用。例如，所有页面都可以访问当前的页面标题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; page_title &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-内容对象"><a href="#2-内容对象" class="headerlink" title="2. 内容对象"></a>2. 内容对象</h3><p>内容对象用于输出模板和 section 文件的内容，以及由 shopify 加载的脚本和样式表。例如，在布局文件的body标签中使用 content_for_layout 对象输出模板的内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; content_for_layout &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-其他对象"><a href="#3-其他对象" class="headerlink" title="3. 其他对象"></a>3. 其他对象</h3><p>其他对象只有在特定的情况下使用，例如，可以在产品详情页使用 product 对象获取产品信息，比如输出产品标题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; product.<span class="property">title</span> &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="二、全局对象"><a href="#二、全局对象" class="headerlink" title="二、全局对象"></a>二、全局对象</h2><h3 id="1-all-country-option-tags"><a href="#1-all-country-option-tags" class="headerlink" title="1. all_country_option_tags"></a>1. all_country_option_tags</h3><ul><li>all_country_option_tags 变量用于获取每个国家与其子区域数据。</li><li>all_country_option_tags 变量为每个国家输出一个<option>标签。</li><li>每个<option>标签都有一个data-province属性，该属性包含国家的子区域数组。</li><li>all_country_option_tags 需要被 <select> 标签包裹。</li><li>all_country_option_tags 对象应该被包装在<select>标签中:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name=<span class="string">&quot;country&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; all_country_option_tags &#125;&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>输出：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name=<span class="string">&quot;country&quot;</span>&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;option value=<span class="string">&quot;China&quot;</span> data-provinces=<span class="string">&quot;[[&amp;quot;Anhui&amp;quot;,&amp;quot;Anhui&amp;quot;],[&amp;quot;Beijing&amp;quot;,&amp;quot;Beijing&amp;quot;],...]&quot;</span>&gt;<span class="title class_">China</span>&lt;/option&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Christmas Island&quot;</span> <span class="attr">data-provinces</span>=<span class="string">&quot;[]&quot;</span>&gt;</span>Christmas Island<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">  ...</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-country-option-tags"><a href="#2-country-option-tags" class="headerlink" title="2. country_option_tags"></a>2. country_option_tags</h3><p>和 all_country_option_tags 类似，但只获取商店后台“发货和配送”页面“可发货区域”的国家或地区。</p><h3 id="3-cart"><a href="#3-cart" class="headerlink" title="3. cart"></a>3. cart</h3><p>cart 对象用于获取购物车数据。</p><h3 id="4-customer"><a href="#4-customer" class="headerlink" title="4. customer"></a>4. customer</h3><ul><li>customer 对象用于获取当前登录账户的信息。</li><li>如果用户未登录，customer 值为 nil。</li><li>如果在需要登录才能访问的页面，例如 &#x2F;accounts 下属页面，则不需要判断是否未 nil，直接使用即可。</li></ul><h3 id="5-customer-address"><a href="#5-customer-address" class="headerlink" title="5. customer_address"></a>5. customer_address</h3><p>customer_address 对象可通过 customer.addresses 获取。</p><h2 id="三、内容对象"><a href="#三、内容对象" class="headerlink" title="三、内容对象"></a>三、内容对象</h2><h2 id="四、其他对象"><a href="#四、其他对象" class="headerlink" title="四、其他对象"></a>四、其他对象</h2><h3 id="1-address"><a href="#1-address" class="headerlink" title="1. address"></a>1. address</h3><ul><li>地址对象包含客户在Shopify的结帐页面中输入的信息。 请注意，客户可以输入两个地址:账单地址或送货地址。</li><li>访问地址对象的属性时，必须指定要访问的地址。 这可以通过在属性前使用shipping_address或billing_address来实现。</li><li>地址对象可以在电子邮件模板，结帐的订单状态页面，以及订单打印机等应用程序中使用。</li></ul><h3 id="2-article"><a href="#2-article" class="headerlink" title="2. article"></a>2. article</h3><ul><li>article 对象用于获取某篇文章数据。</li><li>article 对象可在 article 页面获取。</li><li>article 属于某个 blog ，blog 相当于 article 的类别。</li></ul><h3 id="3-block"><a href="#3-block" class="headerlink" title="3. block"></a>3. block</h3><ul><li>block 对象用于获取 sections 的 block 数据。</li><li>block 对象可在 section 文件或 section 文件引入的 snippet 文件中获取。</li><li>通过循环 section.blocks 来获取 block 对象。</li></ul><h3 id="4-blog"><a href="#4-blog" class="headerlink" title="4. blog"></a>4. blog</h3><ul><li>blog 对象用于获取博客数据。</li><li>blog 对象可在博客页面或文章页面获取。</li><li>博客是文章的类别，每篇文章都要属于某个博客。</li><li>博客可以统一设置其下的文章的评论规则（禁止评论、需审核评论、自动发布评论）。</li></ul><h3 id="5-checkout"><a href="#5-checkout" class="headerlink" title="5. checkout"></a>5. checkout</h3><p>checkout 对象用于结账页。只有Shopify Plus商家才能自定义结账页。</p><h3 id="6-collection"><a href="#6-collection" class="headerlink" title="6. collection"></a>6. collection</h3><ul><li>collection 对象用于获取产品系列数据（shopify 将 collection 翻译为 产品系列）。</li><li>collection 对象可在产品系列页面获取。</li><li>某个系列下可包含任意个产品。</li></ul><h3 id="7-color"><a href="#7-color" class="headerlink" title="7. color"></a>7. color</h3><ul><li>color 对象用于颜色的详细信息，比如rgba，hsl。直接打印此对象会得到颜色值。</li><li>color 对象从 color 类型的 settings 获取。</li></ul><h3 id="8-comment"><a href="#8-comment" class="headerlink" title="8. comment"></a>8. comment</h3><ul><li>comment 对象用于获取某篇文章的评论数据。</li><li>comment 对象可通过遍历 article.comments 获取。</li></ul><h3 id="9-currency"><a href="#9-currency" class="headerlink" title="9. currency"></a>9. currency</h3><ul><li>currency 对象用于获取货币的信息（符号、名称等）。</li><li>currency 对象可通过 shop.currency、cart.currency、checkout.currency 等对象获取。</li></ul><h3 id="10-current-page"><a href="#10-current-page" class="headerlink" title="10. current_page"></a>10. current_page</h3><p>current_page 变量用于获取浏览分页内容时的页码，一般用在 paginate 标签内，也可以用在外面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Liquid 对象包含在页面上输出动态内容的属性。&lt;/li&gt;
&lt;li&gt;Liquid 对象是主题主要数据来源。（其</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Shopify开发之数组过滤器</title>
    <link href="http://example.com/2023/03/16/Shopify%E5%BC%80%E5%8F%91%E4%B9%8B%E6%95%B0%E7%BB%84%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://example.com/2023/03/16/Shopify%E5%BC%80%E5%8F%91%E4%B9%8B%E6%95%B0%E7%BB%84%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2023-03-16T04:00:00.000Z</published>
    <updated>2023-03-16T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>过滤器是修改数字、字符串、变量和对象输出的简单方法。 它们被放置在一个输出标记</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;过滤器&quot;&gt;&lt;a href=&quot;#过滤器&quot; class=&quot;headerlink&quot; title=&quot;过滤器&quot;&gt;&lt;/a&gt;过滤器&lt;/h2&gt;&lt;p&gt;过滤器是修改数字、字符串、变量和对象输出的简单方法。 它们被放置在一个输出标记&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Shopify开发之变量标签</title>
    <link href="http://example.com/2023/02/22/Shopify%E5%BC%80%E5%8F%91%E4%B9%8B%E5%8F%98%E9%87%8F%E6%A0%87%E7%AD%BE/"/>
    <id>http://example.com/2023/02/22/Shopify%E5%BC%80%E5%8F%91%E4%B9%8B%E5%8F%98%E9%87%8F%E6%A0%87%E7%AD%BE/</id>
    <published>2023-02-22T04:00:00.000Z</published>
    <updated>2023-02-22T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量标签"><a href="#变量标签" class="headerlink" title="变量标签"></a>变量标签</h2><p>变量标签用来创建一个 liquid 变量</p><h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><p>创建一个命名变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% assign favorite_food = <span class="string">&#x27;apples&#x27;</span> %&#125;</span><br><span class="line"><span class="title class_">My</span> favorite food is &#123;&#123; favorite_food &#125;&#125;.</span><br></pre></td></tr></table></figure><h3 id="capture"><a href="#capture" class="headerlink" title="capture"></a>capture</h3><p>捕获开始和结束标记内的字符串，并将其赋值给一个变量。 使用 capture 创建的变量存储为字符串<br>使用 capture，您可以混合使用 assign 创建的其他变量来创建复杂字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% assign favorite_food = <span class="string">&#x27;pizza&#x27;</span> %&#125;</span><br><span class="line">&#123;% assign age = <span class="number">35</span> %&#125;</span><br><span class="line">&#123;% capture about_me %&#125;</span><br><span class="line">I am &#123;&#123; age &#125;&#125; and my favorite food is &#123;&#123; favorite_food &#125;&#125;.</span><br><span class="line">&#123;% endcapture %&#125;</span><br><span class="line">&#123;&#123; about_me &#125;&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am <span class="number">35</span> and my favorite food is pizza. </span><br></pre></td></tr></table></figure><h3 id="increment"><a href="#increment" class="headerlink" title="increment"></a>increment</h3><p>创建一个新的数字变量，并在每次调用该变量的增量时将其值增加 1。 计数器的初始值为 0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% increment counter %&#125;</span><br><span class="line">&#123;% increment counter %&#125;</span><br><span class="line">&#123;% increment counter %&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>使用 increment 创建的变量与使用 assign 或 capture 创建的变量是分开的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% assign my_number = <span class="number">10</span> %&#125;</span><br><span class="line">&#123;% increment my_number %&#125;</span><br><span class="line">&#123;% increment my_number %&#125;</span><br><span class="line">&#123;% increment my_number %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; my_number &#125;&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="decrement"><a href="#decrement" class="headerlink" title="decrement"></a>decrement</h3><p>创建一个新的数字变量，并在每次对该变量进行递减调用时将其值减少 1。 计数器的初始值为 -1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% decrement variable %&#125;</span><br><span class="line">&#123;% decrement variable %&#125;</span><br><span class="line">&#123;% decrement variable %&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">1</span></span><br><span class="line">-<span class="number">2</span></span><br><span class="line">-<span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;变量标签&quot;&gt;&lt;a href=&quot;#变量标签&quot; class=&quot;headerlink&quot; title=&quot;变量标签&quot;&gt;&lt;/a&gt;变量标签&lt;/h2&gt;&lt;p&gt;变量标签用来创建一个 liquid 变量&lt;/p&gt;
&lt;h3 id=&quot;assign&quot;&gt;&lt;a href=&quot;#assign&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Shopify开发之运算符和数据类型</title>
    <link href="http://example.com/2023/01/17/Shopify%E5%BC%80%E5%8F%91%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2023/01/17/Shopify%E5%BC%80%E5%8F%91%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-01-17T04:00:00.000Z</published>
    <updated>2023-01-17T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>Liquid使用标签、对象和过滤器的组合来加载动态内容。 它们在Liquid模板文件中使用，这些文件构成了一个主题</p><h4 id="1-标签"><a href="#1-标签" class="headerlink" title="1. 标签"></a>1. 标签</h4><p>标签用来控制模板的逻辑，如条件语句、循环语句、赋值语句等；除了这些基本的逻辑处理语句，Liquid还定义了一些主题标签，如注释标签、Liquid标签、表单标签、layout标签、paginate标签、raw标签、render标签、section标签、style标签等，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> user.<span class="property">name</span> == <span class="string">&#x27;elvis&#x27;</span> %&#125;</span><br><span class="line">  <span class="title class_">Hey</span> <span class="title class_">Elvis</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="2-对象"><a href="#2-对象" class="headerlink" title="2. 对象"></a>2. 对象</h4><p>对象也叫做变量，包含用于在页面上显示动态内容的属性。包括全局对象、内容对象、其他变量。输出一个对象的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; product.<span class="property">title</span> &#125;&#125; </span><br></pre></td></tr></table></figure><h4 id="3-过滤器"><a href="#3-过滤器" class="headerlink" title="3. 过滤器"></a>3. 过滤器</h4><p>Liquid过滤器用于修改数字、字符串、对象和变量的输出。 它们被放置在输出标记 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;p&gt;Liquid使用标签、对象和过滤器的组合来加载动态内容。 它们在Liquid模板文件中使用，这些文件构成了一个主题&lt;/p&gt;
&lt;h4 id=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>github + hexo 搭建个人博客</title>
    <link href="http://example.com/2023/01/15/github+hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2023/01/15/github+hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-01-15T04:00:00.000Z</published>
    <updated>2021-01-15T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h1><ul><li>准备一个文件夹存放源文件</li><li>安装 git</li><li>安装 Node.js</li><li>注册 github</li></ul><h1 id="2-初始化-Hexo-博客"><a href="#2-初始化-Hexo-博客" class="headerlink" title="2. 初始化 Hexo 博客"></a>2. 初始化 Hexo 博客</h1><ol><li>打开命令行工具，输入 npm 命令安装 Hexo：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li>安装完成后，进入源文件夹初始化博客<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li>执行静态部署命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li>本地启动，本地预览<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>此时浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以打开初始的博客了</li></ol><h1 id="3-将-Hexo-部署到-github"><a href="#3-将-Hexo-部署到-github" class="headerlink" title="3. 将 Hexo 部署到 github"></a>3. 将 Hexo 部署到 github</h1><ol><li><p>首先需要在github上新建一个仓库，仓库名称是<code>你的用户名+github.io</code><br><img src="/../img/github+hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/newRepo.png" alt="Alt"></p></li><li><p>回到源文件夹下，打开文件<code>_config.yml</code>, 找到<code>deploy</code>配置项进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/RichardYZM/RichardYZM.github.io.git // github 仓库地址</span><br><span class="line">  branch: main // 绑定的仓库分支</span><br></pre></td></tr></table></figure></li><li><p>在源文件夹下打开命令行工具，安装git的部署插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>安装完成后，执行下面三个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  //清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g      //生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo d      //自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure></li><li><p>完成以后，打开<code>https://你的用户名.github.io</code>就可以打开你的博客了</p></li></ol><h1 id="4-安装并切换主题"><a href="#4-安装并切换主题" class="headerlink" title="4. 安装并切换主题"></a>4. 安装并切换主题</h1><ol><li>使用 npm 安装 butterfly 主题（可自行查找其他主题）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure></li><li>应用主题</li></ol><ul><li>修改源文件夹目录下的<code>_config.yml</code>, 修改<code>theme</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>部署</li></ol><ul><li>依然是执行下面三个命令便可进行部署<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1. 准备工作&quot;&gt;&lt;/a&gt;1. 准备工作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;准备一个文件夹存放源文件&lt;/li&gt;
&lt;li&gt;安装 git&lt;/li&gt;
&lt;li&gt;安装 Node.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Shopify开发之目录结构</title>
    <link href="http://example.com/2022/12/27/Shopify%E5%BC%80%E5%8F%91%E4%B9%8B%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2022/12/27/Shopify%E5%BC%80%E5%8F%91%E4%B9%8B%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</id>
    <published>2022-12-27T04:00:00.000Z</published>
    <updated>2022-12-27T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="每个商店主题下有7个目录，在templates目录下有一个customers文件夹，一共8个目录。除此之外，不能有其他的目录。如下："><a href="#每个商店主题下有7个目录，在templates目录下有一个customers文件夹，一共8个目录。除此之外，不能有其他的目录。如下：" class="headerlink" title="每个商店主题下有7个目录，在templates目录下有一个customers文件夹，一共8个目录。除此之外，不能有其他的目录。如下："></a>每个商店主题下有7个目录，在templates目录下有一个customers文件夹，一共8个目录。除此之外，不能有其他的目录。如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">└── theme</span><br><span class="line">    ├── assets</span><br><span class="line">    ├── config</span><br><span class="line">    ├── layout</span><br><span class="line">    ├── locales</span><br><span class="line">    ├── sections</span><br><span class="line">    ├── snippets</span><br><span class="line">    └── templates</span><br><span class="line">        └── customers</span><br></pre></td></tr></table></figure><h4 id="1-assets"><a href="#1-assets" class="headerlink" title="1. assets"></a>1. assets</h4><p>assets目录包含主题中使用的所有资源文件，包括图像、CSS和JavaScript文件。在模板中使用 asset_url 过滤器来引用主题中的资源文件。例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#x27;custom.js&#x27; | asset_url &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-config"><a href="#2-config" class="headerlink" title="2. config"></a>2. config</h4><p>config目录包含主题的配置文件。 配置文件在主题编辑器的主题设置区域中定义设置，并存储它们的值。</p><p>config目录下有两个配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└── theme</span><br><span class="line">    ...</span><br><span class="line">    ├── config</span><br><span class="line">    |   ├── settings_data.json</span><br><span class="line">    |   └── settings_schema.json</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ul><li><p>settings_data.json<br>包含settings_schema.json中保存的设置值。</p></li><li><p>settings_schema.json<br>控制主题编辑器的“主题设置”区域的组织和内容。</p></li></ul><h4 id="3-layout"><a href="#3-layout" class="headerlink" title="3. layout"></a>3. layout</h4><p>layout目录包含主题的布局文件，模板文件通过这些文件呈现。</p><p>布局是一种Liquid文件，它允许你在多个页面上都引用同一个布局文件。 例如，多个包含相同头部和底部的页面可以引用同一个布局文件，布局文件的主体内容可以通过以下方式渲染出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; content_for_layout &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="4-locales"><a href="#4-locales" class="headerlink" title="4. locales"></a>4. locales</h4><p>locale目录包含主题的locale文件，这些文件用于提供翻译后的内容。 Locale文件允许您在主题编辑器中提供翻译体验，为在线商店提供翻译，并允许商家在在线商店中定制文本。</p><h4 id="5-sections"><a href="#5-sections" class="headerlink" title="5. sections"></a>5. sections</h4><p>sections目录包含一个主题的sections。</p><p>section是Liquid文件，它允许您创建可重用的内容模块，商家可以对其进行定制。它们还可以包含允许商家在一个区域内添加、删除和重新排序内容的区块。</p><h4 id="6-snippets"><a href="#6-snippets" class="headerlink" title="6. snippets"></a>6. snippets</h4><p>snippets目录包含较小的可重用代码片段的Liquid文件。 您可以使用Liquid <strong>render</strong>标记在整个主题中引用这些片段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- render &#x27;icon-caret&#x27; -%&#125;</span><br></pre></td></tr></table></figure><h4 id="7-templates"><a href="#7-templates" class="headerlink" title="7. templates"></a>7. templates</h4><p>templates目录下的每一个json文件是一个模板，每一个模板对应着一个页面。</p><p>json模板是存储要呈现的section列表及其相关设置的数据文件，每一个section是一个块级元素，可以在后台的主题编辑器中添加、删除、排序这些块。</p><p>json文件里面是一个对象，模板对象有五个属性：</p><table><thead><tr><th>属性名</th><th>数据类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>string</td><td>非必须</td><td>模板名称</td></tr><tr><td>layout</td><td>string | false</td><td>非必须</td><td>指定模板所属的布局文件；也可以设为false，表示不需要模板。默认布局文件为：theme.liquid</td></tr><tr><td>wrapper</td><td>string</td><td>非必须</td><td>如果指定了一个标签名(div、main、section三选一)，则会动态生成这个标签，并把sections全部塞入到这个标签元素里面。也可以给这个标签指定id或类名等，例如：div#wrapper.wrapper[data-attr&#x3D;”wrapper”]</td></tr><tr><td>sections</td><td>Object</td><td>必须</td><td>定义各个section对象，详细section对象见下表。一个模板文件里最多只能有20个section，每一个section最有只能有16个block。</td></tr><tr><td>order</td><td>Array</td><td>必须</td><td>定义sections的顺序</td></tr></tbody></table><p>json示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default product template&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;layout&quot;</span><span class="punctuation">:</span> <span class="string">&quot;product&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;wrapper&quot;</span><span class="punctuation">:</span> <span class="string">&quot;div#div_id.div_class[attribute-one=value]&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sections&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;product&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;main&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>section对象各个特性定义如下：</p><table><thead><tr><th>属性名</th><th>数据类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>&lt;SettingID&gt;</td><td>string</td><td>-</td><td>在block或section的scheme中定义的setting的ID。</td></tr><tr><td>&lt;SectionType&gt;</td><td>string</td><td>必须</td><td>要渲染的section文件名，不用写扩展名。</td></tr><tr><td>&lt;SectionDisabled&gt;</td><td>boolean</td><td>非必须</td><td>是否渲染这个section。</td></tr><tr><td>&lt;BlockID&gt;</td><td>string</td><td>-</td><td>block的id，只接受字母数字。</td></tr><tr><td>&lt;BlockType&gt;</td><td>string</td><td>必须</td><td>要渲染的block的类型，在section文件的scheme中定义。</td></tr><tr><td>&lt;BlockOrder&gt;</td><td>Array</td><td>非必须</td><td>多个block的id数组，id必须存在对象中，且不能重复。</td></tr><tr><td>&lt;SettingID&gt;</td><td>string</td><td>必须</td><td>在block或section的scheme中定义的setting的ID。</td></tr><tr><td>&lt;SettingValue&gt;</td><td>(multiple)</td><td>-</td><td>一个setting的有效值。</td></tr></tbody></table><p>section对象结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sections<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  &lt;SectionID&gt;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> &lt;SectionType&gt;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;disabled&quot;</span><span class="punctuation">:</span> &lt;SectionDisabled&gt;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      &lt;SettingID&gt;<span class="punctuation">:</span> &lt;SettingValue&gt;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;blocks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      &lt;BlockID&gt;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> &lt;BlockType&gt;<span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          &lt;SettingID&gt;<span class="punctuation">:</span> &lt;SettingValue&gt;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;block_order&quot;</span><span class="punctuation">:</span> &lt;BlockOrder&gt;</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>section对象示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># templates/product.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default product template&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sections&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;product&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;show_vendor&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;recommendations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;product-recommendations&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;recommendations&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;每个商店主题下有7个目录，在templates目录下有一个customers文件夹，一共8个目录。除此之外，不能有其他的目录。如下：&quot;&gt;&lt;a href=&quot;#每个商店主题下有7个目录，在templates目录下有一个customers文件夹，一共8个目录。除此之外，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>antd table 拖拽排序的问题</title>
    <link href="http://example.com/2022/11/08/antd%20table%20%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/11/08/antd%20table%20%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-11-08T04:00:00.000Z</published>
    <updated>2022-11-08T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-问题：-使用antd-table中的拖拽手柄时出现拖拽行消失"><a href="#1-问题：-使用antd-table中的拖拽手柄时出现拖拽行消失" class="headerlink" title="1. 问题： 使用antd table中的拖拽手柄时出现拖拽行消失"></a>1. 问题： 使用antd table中的拖拽手柄时出现拖拽行消失</h2><p><img src="https://img-blog.csdnimg.cn/dac50fa3ed31467fb1c314b545c8e4a6.jpeg" alt="在这里插入图片描述"></p><h2 id="2-描述"><a href="#2-描述" class="headerlink" title="2. 描述"></a>2. 描述</h2><p>排序时项目消失&#x2F;CSS问题<br>排序后，react-sortable-hoc创建正在排序的元素的克隆（即sortable-helper），并将其附加到&lt;body标记的末尾。原始元素仍然是in-place，以保持其在DOM中的位置，直到拖动结束（使用inline-styling使其不可见）。如果sortable-helper从CSS的角度来看变得一团糟，那么考虑一下，您的可拖动项的选择器可能依赖于一个不再存在的父元素（同样，因为sortable-helper位于<body>的末尾）。这也可能是一个z-index问题，例如，当在引导模式中使用react-sortable-hoc时，您需要增加SortableHelper的z-index，以便它显示在模式的顶部</p><h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h2><h4 id="1-设置z-index"><a href="#1-设置z-index" class="headerlink" title="1. 设置z-index"></a>1. 设置z-index</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">row</span>-dragging &#123;</span><br><span class="line">  <span class="attr">background</span>: #fafafa;</span><br><span class="line">  <span class="attr">border</span>: 1px solid #ccc;</span><br><span class="line">  z-<span class="attr">index</span>: <span class="number">10000</span> !important;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">row</span>-dragging td &#123;</span><br><span class="line">  <span class="attr">padding</span>: 16px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">row</span>-dragging .<span class="property">drag</span>-visible &#123;</span><br><span class="line">  <span class="attr">visibility</span>: visible;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-z-index无效的情况，是不是使用了Modal"><a href="#2-z-index无效的情况，是不是使用了Modal" class="headerlink" title="2. z-index无效的情况，是不是使用了Modal"></a>2. z-index无效的情况，是不是使用了Modal</h4><p><img src="https://img-blog.csdnimg.cn/115082ae21a1448a8b2c37c9ff0b0e70.png" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> modalBody = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Modal</span> <span class="attr">ref</span>=<span class="string">&#123;modalBody&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">SortableBody</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">useDragHandle</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">disableAutoscroll</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">helperClass</span>=<span class="string">&quot;row-dragging&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onSortEnd</span>=<span class="string">&#123;onSortEnd&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">helperContainer</span>=<span class="string">&#123;modalBody.current&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般来说设置z-index都可解决问题，个别特殊组件需要把挂载的组件ref作为属性传入</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-问题：-使用antd-table中的拖拽手柄时出现拖拽行消失&quot;&gt;&lt;a href=&quot;#1-问题：-使用antd-table中的拖拽手柄时出现拖拽行消失&quot; class=&quot;headerlink&quot; title=&quot;1. 问题： 使用antd table中的拖拽手柄时出现</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在 Window下调试 ios 的 Safari 浏览器</title>
    <link href="http://example.com/2022/11/02/%E5%9C%A8%20Window%E4%B8%8B%E8%B0%83%E8%AF%95%20ios%20%E7%9A%84%20Safari%20%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>http://example.com/2022/11/02/%E5%9C%A8%20Window%E4%B8%8B%E8%B0%83%E8%AF%95%20ios%20%E7%9A%84%20Safari%20%E6%B5%8F%E8%A7%88%E5%99%A8/</id>
    <published>2022-11-02T04:00:00.000Z</published>
    <updated>2022-11-02T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装-iTunes"><a href="#1-安装-iTunes" class="headerlink" title="1. 安装 iTunes"></a>1. 安装 iTunes</h1><p>Windows 首先要安装 iTunes，下载地址：<a href="https://www.apple.com/itunes/">iTunes</a></p><h1 id="2-iPhone开启调试模式"><a href="#2-iPhone开启调试模式" class="headerlink" title="2. iPhone开启调试模式"></a>2. iPhone开启调试模式</h1><ol><li>使用数据线将ios设备与电脑连接</li><li>在ios设备上打开 **<code>设置 &gt; Safari &gt; 高级&gt; 网页检查器 &gt; 启用</code>**。</li></ol><h1 id="3-安装scoop"><a href="#3-安装scoop" class="headerlink" title="3. 安装scoop"></a>3. 安装scoop</h1><ol><li>使用PowerShell在你当前Windows的账户下执行<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned <span class="literal">-s</span> cu</span><br></pre></td></tr></table></figure></li><li>下载scoop<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">iex</span> (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-安装ios-webkit-debug-proxy"><a href="#4-安装ios-webkit-debug-proxy" class="headerlink" title="4. 安装ios-webkit-debug-proxy"></a>4. 安装ios-webkit-debug-proxy</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add extras</span><br><span class="line">scoop install ios<span class="literal">-webkit-debug-proxy</span></span><br></pre></td></tr></table></figure><p>如图，点击允许访问<br><img src="/../img/%E5%9C%A8%20Window%E4%B8%8B%E8%B0%83%E8%AF%95%20ios%20%E7%9A%84%20Safari%20%E6%B5%8F%E8%A7%88%E5%99%A8/a.webp" alt="在这里插入图片描述"></p><h1 id="5-开始调试"><a href="#5-开始调试" class="headerlink" title="5. 开始调试"></a>5. 开始调试</h1><ol><li>浏览器输入：<code>http://localhost:9221/</code>,这里会显示所有已连接的设备清单，选择一个设备并点击打开</li><li>可以发现地址栏变为：<a href="http://localhost:9222/">http://localhost:9222/</a>, 同时显示该ios设备中Safari浏览器打开的所有页面，和一个提示：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Inspectable pages for iPad:</span><br><span class="line">http://********</span><br><span class="line">Note: Your browser may block 1,2 the above links with JavaScript console error:` </span><br><span class="line">       Not allowed to load local resource: chrome-devtools://...</span><br><span class="line">To open a link: right-click on the link (control-click on Mac), &#x27;Copy Link Address&#x27;, and paste it into address bar.</span><br></pre></td></tr></table></figure></li><li>提示浏览器禁止页面加载本地资源，需在上面的链接（即safari显示已打开页面的链接）点击右键复制链接，然后手动新建一个标签页将链接粘贴进去，回车访问。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome-devtools://devtools/bundled/inspector.html?ws=localhost:9222/devtools/page/1</span><br></pre></td></tr></table></figure></li></ol><h1 id="6-再次调试"><a href="#6-再次调试" class="headerlink" title="6. 再次调试"></a>6. 再次调试</h1><p>执行命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ios_webkit_debug_proxy <span class="operator">-f</span> chrome<span class="literal">-devtools</span>://devtools/bundled/inspector.html</span><br></pre></td></tr></table></figure><p>然后重复上面第5步</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-安装-iTunes&quot;&gt;&lt;a href=&quot;#1-安装-iTunes&quot; class=&quot;headerlink&quot; title=&quot;1. 安装 iTunes&quot;&gt;&lt;/a&gt;1. 安装 iTunes&lt;/h1&gt;&lt;p&gt;Windows 首先要安装 iTunes，下载地址：&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在 Umi 中打包与加载自定义字体</title>
    <link href="http://example.com/2022/10/18/%E5%9C%A8%20Umi%20%E4%B8%AD%E6%89%93%E5%8C%85%E4%B8%8E%E5%8A%A0%E8%BD%BD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/"/>
    <id>http://example.com/2022/10/18/%E5%9C%A8%20Umi%20%E4%B8%AD%E6%89%93%E5%8C%85%E4%B8%8E%E5%8A%A0%E8%BD%BD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</id>
    <published>2022-10-18T04:00:00.000Z</published>
    <updated>2022-10-18T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Webpack 打包字体文件的时候需要使用 file-loader 来处理打包文件，在 UmiJS 3 中可通过配置文件中的 chainWebpack 函数来自定义 Webpack 的配置。</p><ol><li><p>首先安装 file-loader</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save file-loader</span><br></pre></td></tr></table></figure></li><li><p>然后再umi的配置文件 .&#x2F;umirc.ts 或 config.js 中的 chainWebpack 加上如下配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">chainWebpack</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    config.<span class="property">module</span> <span class="comment">// 配置 file-loader</span></span><br><span class="line">      .<span class="title function_">rule</span>(<span class="string">&#x27;otf&#x27;</span>)</span><br><span class="line">      .<span class="title function_">test</span>(<span class="regexp">/.otf$/</span>)</span><br><span class="line">      .<span class="title function_">use</span>(<span class="string">&#x27;file-loader&#x27;</span>)</span><br><span class="line">      .<span class="title function_">loader</span>(<span class="string">&#x27;file-loader&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在全局的 less 字体样式文件中声明字体</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;CustomFont&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./font.otf&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后就可以直接使用声明好的字体啦</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.customFont</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&#x27;CustomFont&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 Webpack 打包字体文件的时候需要使用 file-loader 来处理打包文件，在 UmiJS 3 中可通过配置文件中的 chainWebpack 函数来自定义 Webpack 的配置。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先安装 file-loader&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React性能优化的几种方式</title>
    <link href="http://example.com/2022/10/10/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/10/10/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-10-10T04:00:00.000Z</published>
    <updated>2022-10-10T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-使用React-Memo来缓存组件"><a href="#1-使用React-Memo来缓存组件" class="headerlink" title="1. 使用React.Memo来缓存组件"></a>1. 使用React.Memo来缓存组件</h1><p>提升应用程序性能的一种方法是实现memoization。Memoization是一种优化技术，主要通过存储昂贵的函数调用的结果，并在再次发生相同的输入时返回缓存的结果，以此来加速程序。<br>父组件的每次状态更新，都会导致子组件重新渲染，即使传入子组件的状态没有变化，为了减少重复渲染，我们可以使用React.memo来缓存组件，这样只有当传入组件的状态值发生变化时才会重新渲染。如果传入相同的值，则返回缓存的组件。示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  </span><br><span class="line">  )</span><br><span class="line">&#125;);s</span><br></pre></td></tr></table></figure><h1 id="2-使用useMemo缓存大量的计算"><a href="#2-使用useMemo缓存大量的计算" class="headerlink" title="2. 使用useMemo缓存大量的计算"></a>2. 使用useMemo缓存大量的计算</h1><p>有时渲染是不可避免的，但如果您的组件是一个功能组件，重新渲染会导致每次都调用大型计算函数，这是非常消耗性能的，我们可以使用新的useMemo钩子来“记忆”这个计算函数的计算结果。这样只有传入的参数发生变化后，该计算函数才会重新调用计算新的结果。<br>通过这种方式，您可以使用从先前渲染计算的结果来挽救昂贵的计算耗时。总体目标是减少JavaScript在呈现组件期间必须执行的工作量，以便主线程被阻塞的时间更短。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 避免这样做</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> someProp = <span class="title function_">heavyCalculation</span>(props.<span class="property">item</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">someProp</span>=<span class="string">&#123;someProp&#125;</span> /&gt;</span></span> </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 只有 `props.item` 改变时someProp的值才会被重新计算</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> someProp = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">heavyCalculation</span>(props.<span class="property">item</span>), [props.<span class="property">item</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">someProp</span>=<span class="string">&#123;someProp&#125;</span> /&gt;</span></span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-避免使用内联对象"><a href="#3-避免使用内联对象" class="headerlink" title="3. 避免使用内联对象"></a>3. 避免使用内联对象</h1><p>使用内联对象时，react会在每次渲染时重新创建对此对象的引用，这会导致接收此对象的组件将其视为不同的对象,因此，该组件对于prop的浅层比较始终返回false,导致组件一直重新渲染。<br>许多人使用的内联样式的间接引用，就会使组件重新渲染，可能会导致性能问题。为了解决这个问题，我们可以保证该对象只初始化一次，指向相同引用。另外一种情况是传递一个对象，同样会在渲染时创建不同的引用，也有可能导致性能问题，我们可以利用ES6扩展运算符将传递的对象解构。这样组件接收到的便是基本类型的props，组件通过浅层比较发现接受的prop没有变化，则不会重新渲染。示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> aProp = &#123; <span class="attr">someProp</span>: <span class="string">&#x27;someValue&#x27;</span> &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> <span class="attr">0</span> &#125;&#125; <span class="attr">aProp</span>=<span class="string">&#123;aProp&#125;</span> /&gt;</span></span>  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Do this instead :)</span></span><br><span class="line"><span class="keyword">const</span> styles = &#123; <span class="attr">margin</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> aProp = &#123; <span class="attr">someProp</span>: <span class="string">&#x27;someValue&#x27;</span> &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">style</span>=<span class="string">&#123;styles&#125;</span> &#123;<span class="attr">...aProp</span>&#125; /&gt;</span></span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-避免使用匿名函数"><a href="#4-避免使用匿名函数" class="headerlink" title="4. 避免使用匿名函数"></a>4. 避免使用匿名函数</h1><p>虽然匿名函数是传递函数的好方法（特别是需要用另一个prop作为参数调用的函数），但它们在每次渲染上都有不同的引用。这类似于上面描述的内联对象。为了保持对作为prop传递给React组件的函数的相同引用，您可以将其声明为类方法（如果您使用的是基于类的组件）或使用useCallback钩子来帮助您保持相同的引用（如果您使用功能组件）。<br>当然，有时内联匿名函数是最简单的方法，实际上并不会导致应用程序出现性能问题。这可能是因为在一个非常“轻量级”的组件上使用它，或者因为父组件实际上必须在每次props更改时重新渲染其所有内容。因此不用关心该函数是否是不同的引用，因为无论如何，组件都会重新渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 避免这样做</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> props.callback(props.id)&#125; /&gt;</span>  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 优化方法一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> handleChange = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> props.<span class="title function_">callback</span>(props.<span class="property">id</span>), [props.<span class="property">id</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span> /&gt;</span></span>  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 优化方法二</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  handleChange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">id</span>) </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-延迟加载不是立即需要的组件"><a href="#5-延迟加载不是立即需要的组件" class="headerlink" title="5. 延迟加载不是立即需要的组件"></a>5. 延迟加载不是立即需要的组件</h1><p>延迟加载实际上不可见（或不是立即需要）的组件，React加载的组件越少，加载组件的速度就越快。因此，如果您的初始渲染感觉相当粗糙，则可以在初始安装完成后通过在需要时加载组件来减少加载的组件数量。同时，这将允许用户更快地加载您的平台&#x2F;应用程序。最后，通过拆分初始渲染，您将JS工作负载拆分为较小的任务，这将为您的页面提供响应的时间。这可以使用新的React.Lazy和React.Suspense轻松完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 延迟加载不是立即需要的组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MUITooltip</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@material-ui/core/Tooltip&#x27;</span>));</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Tooltip</span>(<span class="params">&#123; children, title &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">React.Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;children&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MUITooltip</span> <span class="attr">title</span>=<span class="string">&#123;title&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">MUITooltip</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">React.Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Tooltip</span> <span class="attr">title</span>=<span class="string">&#123;props.title&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AnotherComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Tooltip</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-使用React-Memo来缓存组件&quot;&gt;&lt;a href=&quot;#1-使用React-Memo来缓存组件&quot; class=&quot;headerlink&quot; title=&quot;1. 使用React.Memo来缓存组件&quot;&gt;&lt;/a&gt;1. 使用React.Memo来缓存组件&lt;/h1&gt;&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>gsap.to, gsap.from, gsap.formTo 的基本使用</title>
    <link href="http://example.com/2022/09/24/gsap.to,%20gsap.from,%20gsap.formTo%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/09/24/gsap.to,%20gsap.from,%20gsap.formTo%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2022-09-24T04:00:00.000Z</published>
    <updated>2022-09-24T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-gsap-to-targets-vars"><a href="#1-gsap-to-targets-vars" class="headerlink" title="1. gsap.to(targets, vars)"></a>1. gsap.to(targets, vars)</h2><p>生成从初始位置（或状态）到目标位置（或状态）的动画<br>targets： 产生动画的对象<br>vars： 目标状态参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从当前的位置移动到100的位置</span></span><br><span class="line">gsap.<span class="title function_">to</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">duration</span>: <span class="number">5</span>, <span class="attr">x</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="2-gsap-from-targets-vars"><a href="#2-gsap-from-targets-vars" class="headerlink" title="2. gsap.from(targets, vars)"></a>2. gsap.from(targets, vars)</h2><p>生成从设置位置（或状态）到初始位置（或状态）的动画<br>targets： 产生动画的对象<br>vars： 设置状态参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从100的位置移动到初始位置</span></span><br><span class="line">gsap.<span class="title function_">from</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">duration</span>: <span class="number">5</span>, <span class="attr">x</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="3-gsap-fromTo-targets-vars-vars"><a href="#3-gsap-fromTo-targets-vars-vars" class="headerlink" title="3. gsap.fromTo(targets, vars, vars)"></a>3. gsap.fromTo(targets, vars, vars)</h2><p>生成从开始位置（或状态）到结束位置（或状态）的动画<br>targets： 产生动画的对象<br>vars（第1个）： 开始状态参数<br>vars(第2个)： 结束状态参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从100的位置移动到300的位置</span></span><br><span class="line">gsap.<span class="title function_">fromTo</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">x</span>: <span class="number">100</span> &#125;,&#123; <span class="attr">duration</span>: <span class="number">5</span>, <span class="attr">x</span>: <span class="number">300</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="4-targets"><a href="#4-targets" class="headerlink" title="4. targets"></a>4. targets</h2><p>设置动画的对象，可以是“.class”、“id”等选择器</p><h2 id="5-vars-参数"><a href="#5-vars-参数" class="headerlink" title="5. vars 参数"></a>5. vars 参数</h2><h5 id="duration"><a href="#duration" class="headerlink" title="duration"></a>duration</h5><p>动画持续时间</p><h5 id="ease"><a href="#ease" class="headerlink" title="ease"></a>ease</h5><p>动画的运动方式。比如“elastic”(弹性)， “strong.inOut”(强烈的先快后慢)等，默认值：“power1.out”(渐缓)</p><h5 id="id"><a href="#id" class="headerlink" title="id"></a>id</h5><p>为tween实例分配id（可选），以便之后使用gsap.getById()来获取该tween</p><h5 id="lazy"><a href="#lazy" class="headerlink" title="lazy"></a>lazy</h5><p>当tween第一次渲染并读取其初始值时，GSAP将尝试延迟值的写入，直到当前的tick(更新循环)的最后再进行写入，这样可以提高性能。因为它避免了浏览器读&#x2F;写&#x2F;读&#x2F;写的频繁操作，这种频繁的操作会极大的消耗性能并造成布局抖动。设置lazy:false便禁用这种延迟渲染，但是不建议禁用。默认值：true</p><h5 id="onComplete"><a href="#onComplete" class="headerlink" title="onComplete"></a>onComplete</h5><p>动画完成时调用的函数</p><h5 id="onCompleteParams"><a href="#onCompleteParams" class="headerlink" title="onCompleteParams"></a>onCompleteParams</h5><p>传递给onComplete函数的参数数组</p><h5 id="onRepeat"><a href="#onRepeat" class="headerlink" title="onRepeat"></a>onRepeat</h5><p>当动画重复时调用的函数。需要设置repeat（大于0）才会有效</p><h5 id="onRepeatParams"><a href="#onRepeatParams" class="headerlink" title="onRepeatParams"></a>onRepeatParams</h5><p>传递给onRepeat 函数的参数数组</p><h5 id="onReverseComplete"><a href="#onReverseComplete" class="headerlink" title="onReverseComplete"></a>onReverseComplete</h5><p>当动画从反方向再次达到开始位置时要调用的函数。需要设置reversed: true##### id<br>为tween实例分配id（可选），以便之后使用gsap.getById()来获取该tween</p><h5 id="onReverseCompleteParams"><a href="#onReverseCompleteParams" class="headerlink" title="onReverseCompleteParams"></a>onReverseCompleteParams</h5><p>传递给onReverseComplete函数的参数数组</p><h5 id="onStart"><a href="#onStart" class="headerlink" title="onStart"></a>onStart</h5><p>动画开始时要调用的函数</p><h5 id="onStartParams"><a href="#onStartParams" class="headerlink" title="onStartParams"></a>onStartParams</h5><p>传递给onStartParams函数的参数数组</p><h5 id="onUpdate"><a href="#onUpdate" class="headerlink" title="onUpdate"></a>onUpdate</h5><p>每次动画更新时（每帧）调用的函数</p><h5 id="onUpdateParams"><a href="#onUpdateParams" class="headerlink" title="onUpdateParams"></a>onUpdateParams</h5><p>传递给onUpdate函数的参数数组</p><h5 id="overWrite"><a href="#overWrite" class="headerlink" title="overWrite"></a>overWrite</h5><p>如果设置true, 该对象的其他动画（任何属性）就会被停止；如果设置auto，只会停止其他动画的相关属性动画；如果false，则不停止任何动画，最后呈现的动画效果是各个动画相互作用的结果。 默认值：false</p><h5 id="paused"><a href="#paused" class="headerlink" title="paused"></a>paused</h5><p>如果设置true,动画将在创建时立即暂停。默认值：false</p><h5 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h5><p>设置动画重复的次数。 设置1为重复两次， 默认值：0。设置-1为无限重复</p><h5 id="repeatDelay"><a href="#repeatDelay" class="headerlink" title="repeatDelay"></a>repeatDelay</h5><p>每次动画重复之间等待的时间（秒）。默认值：0</p><h5 id="repeatRefresh"><a href="#repeatRefresh" class="headerlink" title="repeatRefresh"></a>repeatRefresh</h5><p>设置true 会导致重复的动画失效，因为每次完成一次后，会重新更新其开始和结束值。如果属性使用的动态值（随机或函数），会得到特别的动画效果。默认值：false。</p><h5 id="reversed"><a href="#reversed" class="headerlink" title="reversed"></a>reversed</h5><p>如果设置true，动画将调转方向超其开始方向移动。由于开始已经是初始位置，设置true后动画将显示为暂停。默认值：false</p><h5 id="runBackwards"><a href="#runBackwards" class="headerlink" title="runBackwards"></a>runBackwards</h5><p>如果设置true, 动画将翻转其起始值和结束值，但对于ease不会反转。可以通过设置true将gsap.to 转换为gsap.from。默认值：false</p><h5 id="stagger"><a href="#stagger" class="headerlink" title="stagger"></a>stagger</h5><p>如果是多个动画目标，可以通过设置类似stagger:0.1（每个目标动画开始之间间隔0.1秒）来错开每个动画。或可以设置参数对象来实现更高级的动画效果</p><h5 id="startAt"><a href="#startAt" class="headerlink" title="startAt"></a>startAt</h5><p>定义任何属性的初始值（即便它们没有设置动画）</p><h5 id="yoyo"><a href="#yoyo" class="headerlink" title="yoyo"></a>yoyo</h5><p>如果设置true，则每隔一次的重复都将以反方向的方向运动，动画呈现来回运动的效果。单次运动无效，需要配合repeat使用。默认值：false</p><h5 id="yoyoEase"><a href="#yoyoEase" class="headerlink" title="yoyoEase"></a>yoyoEase</h5><p>允许改变yoyo过程中的ease。可以指定特定的ease（例如：“power2.in”），可以设置true来翻转原本的ease。默认值：false。 另外：启动了该属性后，yoyo会自动设置true</p><h5 id="keyframes"><a href="#keyframes" class="headerlink" title="keyframes"></a>keyframes</h5><p>对同一对象的一连串的动画（关键帧动画）。和多个的gsap.to等效</p><h2 id="6-vars-属性的Function类型参数"><a href="#6-vars-属性的Function类型参数" class="headerlink" title="6. vars 属性的Function类型参数"></a>6. vars 属性的Function类型参数</h2><p>通过使用function类型参数来实现更复杂的动画效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 每个div的运动的y值不同，按顺序依次多100。第一个div运动到&#123;x:100, y:0&#125;的位置，第2个div运动到&#123;x:100,y:100&#125;的位置，第3个div运动到&#123;x:100,y:200&#125;的位置...</span></span><br><span class="line">gsap.<span class="title function_">to</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="keyword">function</span>(<span class="params">index, target, targets</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> index * <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 偶数索引的div沿y轴运动100，其他div则y保持不变</span></span><br><span class="line">gsap.<span class="title function_">to</span>(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="keyword">function</span>(<span class="params">index, target, targets</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> index % <span class="number">2</span> === <span class="number">0</span> ? <span class="number">100</span> : <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">// index: 当前运动对象的索引</span></span><br><span class="line"><span class="comment">// target：当前运动对象</span></span><br><span class="line"><span class="comment">// targets: 全部运动对象的数组</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-gsap-to-targets-vars&quot;&gt;&lt;a href=&quot;#1-gsap-to-targets-vars&quot; class=&quot;headerlink&quot; title=&quot;1. gsap.to(targets, vars)&quot;&gt;&lt;/a&gt;1. gsap.to(target</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React.memo、useMemo和useCallback</title>
    <link href="http://example.com/2022/09/13/React.memo%E3%80%81useMemo%E5%92%8CuseCallback/"/>
    <id>http://example.com/2022/09/13/React.memo%E3%80%81useMemo%E5%92%8CuseCallback/</id>
    <published>2022-09-13T04:00:00.000Z</published>
    <updated>2022-09-13T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>我们在使用React开发过程中经常会遇到父组件引入子组件的情况，在不做其他处理的时候，很容易造成子组件不必要的重复渲染。看下面一个的例子，这种情况下，每次父组件更新num值的时候，子组件也会重复渲染。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Child</span> <span class="attr">title</span>=<span class="string">&quot;子组件&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num+1)&#125;&gt;addNum<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>num:&#123;num&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-React-memo"><a href="#1-React-memo" class="headerlink" title="1. React.memo"></a>1. React.memo</h4><ul><li>React.memo(component, func)，第一个参数是自定义组件，第二个参数是一个函数，用来判断组件需不需要重新渲染。如果省略第二个参数，默认会对该组件的props进行浅比较，下面这种情况下，Child的props经浅比较无变化，则不重复渲染</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NewChild</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">Child</span>, <span class="function">(<span class="params">prevProps, nextProps</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// return true 不会重新渲染</span></span><br><span class="line">      <span class="comment">// return false 重新渲染</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NewChild</span> <span class="attr">title</span>=<span class="string">&quot;我是子组件&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num+1)&#125;&gt;addNum<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>num:&#123;num&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然而在某些情况下，光靠React.memo包裹子组件，子组件还是会进行不必要的重复渲染更新，这时useMemo和useCallback则可以进行更细粒度的性能优化。看下面这个例子，这种情况下，每次父组件更新的时候，子组件的title和onChangeTitle值都会生成新的内存地址，所以即使title没改变，子组件也会重新渲染，memo失效。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">&#123;title, onChangeTitle&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onChangeTitle(&#x27;我是新的title&#x27;)&#125;&gt;change title<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NewChild</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">Child</span>)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> [title, setTitle] = <span class="title function_">useState</span>(<span class="string">&#x27;我是子组件&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onChangeTitle</span> = (<span class="params">text</span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setTitle</span>(text)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NewChild</span> <span class="attr">title</span>=<span class="string">&#123;title&#125;</span> <span class="attr">onChangeTitle</span>=<span class="string">&#123;onChangeTitle&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num+1)&#125;&gt;addNum<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>num:&#123;num&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-useMemo"><a href="#2-useMemo" class="headerlink" title="2. useMemo"></a>2. useMemo</h4><ul><li>第一次渲染时执行，缓存变量，之后只有在依赖项改变时才会重新计算记忆值</li></ul><h4 id="3-useCallback"><a href="#3-useCallback" class="headerlink" title="3. useCallback"></a>3. useCallback</h4><ul><li>第一次渲染时执行，缓存函数，之后只有在依赖项改变时才会更新缓存<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">&#123;title, onChangeTitle&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onChangeTitle(&#x27;我是新的title&#x27;)&#125;&gt;change title<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NewChild</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">Child</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> [title, setTitle] = <span class="title function_">useState</span>(<span class="string">&#x27;我是子组件&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> onChangeTitle = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setTitle</span>(text)</span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="keyword">const</span> memoTitle = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> (title), [title])</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NewChild</span> <span class="attr">title</span>=<span class="string">&#123;memoTitle&#125;</span> <span class="attr">onChangeTitle</span>=<span class="string">&#123;onChangeTitle&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num+1)&#125;&gt;add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>num:&#123;num&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>useMemo和useCallback用法差不多，都是在第一次渲染的时候执行，然后在依赖项改变时再次执行，不同点在于，useMemo返回缓存的变量，useCallback返回缓存的函数</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;我们在使用React开发过程中经常会遇到父组件引入子组件的情况，在不做其他处理的时候，很容易造成子组件不必要的重复渲染。看下面一个的例子，这种情况下，每次父组件更新num值的时候，子组件也会重复渲染。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;high</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端 WebSocket 的使用</title>
    <link href="http://example.com/2022/08/17/%E5%89%8D%E7%AB%AF%20WebSocket%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/08/17/%E5%89%8D%E7%AB%AF%20WebSocket%20%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-08-17T04:00:00.000Z</published>
    <updated>2022-08-17T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是-WebSocket"><a href="#1-什么是-WebSocket" class="headerlink" title="1. 什么是 WebSocket"></a>1. 什么是 WebSocket</h3><p>websocket是HTML5开始提供的一种网络通信协议，它的目的是在浏览器之间建立一个不受限的双方通信的通道，比如说，服务器可以在任意时刻发送信息给浏览器。在websocket的API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输</p><h3 id="2-WebSocket-的方法"><a href="#2-WebSocket-的方法" class="headerlink" title="2. WebSocket 的方法"></a>2. WebSocket 的方法</h3><ul><li>ws.send() - 向服务器发送数据</li><li>ws.close() - 关闭连接</li></ul><h3 id="3-WebSocket-的事件"><a href="#3-WebSocket-的事件" class="headerlink" title="3. WebSocket 的事件"></a>3. WebSocket 的事件</h3><ul><li>ws.onopen - 建立连接时触发</li><li>ws.onmessage - 客户端接受服务端数据时触发</li><li>ws.onerror - 通信错误时触发</li><li>ws.onclose - 连接关闭时触发</li></ul><h3 id="4-WebSocket-readyState"><a href="#4-WebSocket-readyState" class="headerlink" title="4. WebSocket.readyState"></a>4. WebSocket.readyState</h3><ul><li>readyState 属性返回实例对象的当前状态，共有四种状态</li><li>0 - 表示正在连接</li><li>1 - 表示连接成功，可以进行通信</li><li>2 - 表示连接正在关闭</li><li>3 - 表示连接已经关闭，或者打开连接失败</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个WebSocket对象</span></span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;接口地址&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接成功时触发</span></span><br><span class="line">ws.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;连接成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 连接失败时触发</span></span><br><span class="line">ws.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;连接失败&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">ws.<span class="title function_">send</span>(); <span class="comment">// 向服务端发送请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收消息时触发</span></span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">MessagEvent</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MessagEvent</span>.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 连接关闭的回调函数</span></span><br><span class="line">ws.<span class="property">onclose</span> = <span class="keyword">function</span>（）&#123;</span><br><span class="line">alert（<span class="string">&quot;close&quot;</span>）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-什么是-WebSocket&quot;&gt;&lt;a href=&quot;#1-什么是-WebSocket&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是 WebSocket&quot;&gt;&lt;/a&gt;1. 什么是 WebSocket&lt;/h3&gt;&lt;p&gt;websocket是HTML5开</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React 使用正则在字符串标签中插入组件</title>
    <link href="http://example.com/2022/07/30/React%20%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E5%9C%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%87%E7%AD%BE%E4%B8%AD%E6%8F%92%E5%85%A5%E7%BB%84%E4%BB%B6/"/>
    <id>http://example.com/2022/07/30/React%20%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E5%9C%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%87%E7%AD%BE%E4%B8%AD%E6%8F%92%E5%85%A5%E7%BB%84%E4%BB%B6/</id>
    <published>2022-07-30T04:00:00.000Z</published>
    <updated>2022-07-30T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>最近遇到一个需求，需要将后端返回的字符串标签中的span标签替换为组件，且渲染在页面上，字符串标签的格式如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">`&lt;p&gt;分析发现xx街道辖区内上报商铺飞线充电事件&lt;span class=&quot;dataItem&quot;&gt;<span class="subst">$&#123;<span class="string">&quot;id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xx区X街道X事件X时间段X问题来源X数据来源的数量&quot;</span>&#125;</span>&lt;/span&gt;起，</span></span><br><span class="line"><span class="string">    占街道事件总数的&lt;span class=&quot;dataItem&quot;&gt;<span class="subst">$&#123;<span class="string">&quot;id&quot;</span>:<span class="number">5</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xx区X街道X事件X时间段X问题来源X数据来源的数量在相同条件下Y事件中的占比&quot;</span>&#125;</span>&lt;/span&gt;，</span></span><br><span class="line"><span class="string">    占街道消防安全类事件总数的&lt;span class=&quot;dataItem&quot;&gt;<span class="subst">$&#123;<span class="string">&quot;id&quot;</span>:<span class="number">6</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xx区X街道X事件X时间段X问题来源X数据来源的数量在相同条件下所有事件中的占比&quot;</span>&#125;</span>&lt;/span&gt;，</span></span><br><span class="line"><span class="string">    占全区商铺飞线充电事件总数的&lt;span class=&quot;dataItem&quot;&gt;<span class="subst">$&#123;<span class="string">&quot;id&quot;</span>:<span class="number">7</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xx区X街道X事件X时间段X问题来源X数据来源的数量在相同条件下xx区的占比&quot;</span>&#125;</span>&lt;/span&gt;，</span></span><br><span class="line"><span class="string">    与其它街道相比排名第&lt;span class=&quot;dataItem&quot;&gt;<span class="subst">$&#123;<span class="string">&quot;id&quot;</span>:<span class="number">8</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xx区X街道X事件X时间段X来源的数量在相同条件下xx区的排名&quot;</span>&#125;</span>&lt;/span&gt;。&lt;/p &gt;`</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>需要将 class 为 “dataItem” 的 span 标签替换为下拉组件，且 span 标签中显示为 ${} 中的 name</li></ul><ol start="2"><li>解决方案<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">    getContent = <span class="function">(<span class="params">info</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> list = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> reg = <span class="regexp">/&lt;span (.*?)&gt;(.*?)&lt;\/span&gt;/g</span>, match, lastIndex = <span class="number">0</span>, ret = [], i = <span class="number">0</span>, bindId = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (match = reg.<span class="title function_">exec</span>(info)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (match.<span class="property">index</span> !== lastIndex) &#123;</span><br><span class="line">                ret.<span class="title function_">push</span>(<span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>, &#123; <span class="attr">className</span>: styles.<span class="property">text</span>, <span class="attr">key</span>: i++ &#125;, info.<span class="title function_">slice</span>(lastIndex, match.<span class="property">index</span>)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(match[<span class="number">2</span>].<span class="title function_">substr</span>(<span class="number">1</span>))</span><br><span class="line">            data.<span class="property">bindId</span> = bindId++</span><br><span class="line">            list.<span class="title function_">push</span>(data)</span><br><span class="line"></span><br><span class="line">            ret.<span class="title function_">push</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Dropdown</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">visible</span>=<span class="string">&#123;showTemplateEdit</span> &amp;&amp; <span class="attr">currentDataItem.bindId</span> === <span class="string">data.bindId&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">destroyPopupOnHide</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">key</span>=<span class="string">&#123;i++&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">overlay</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">                trigger=&#123;[&#x27;click&#x27;]&#125;</span></span><br><span class="line"><span class="language-xml">            &gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#123;styles.dataItem&#125;</span> <span class="attr">data</span>=<span class="string">&#123;&#123;</span> <span class="attr">...data</span> &#125;&#125;&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#x27; &#123;&#x27;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;`$&#123;data.name&#125;`&#125;<span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#x27;&#125; &#x27;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Dropdown</span>&gt;</span></span>);</span><br><span class="line">            lastIndex = match.<span class="property">index</span> + match[<span class="number">0</span>].<span class="property">length</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (info &amp;&amp; lastIndex !== info.<span class="property">length</span>) &#123;</span><br><span class="line">            ret.<span class="title function_">push</span>(info.<span class="title function_">slice</span>(lastIndex))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;this.getContent(str)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Test</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#root&quot;</span>))</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;最近遇到一个需求，需要将后端返回的字符串标签中的span标签替换为组件，且渲染在页面上，字符串标签的格式如下&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js中常见的几种递归用法</title>
    <link href="http://example.com/2022/07/21/js%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E9%80%92%E5%BD%92%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2022/07/21/js%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E9%80%92%E5%BD%92%E7%94%A8%E6%B3%95/</id>
    <published>2022-07-21T04:00:00.000Z</published>
    <updated>2022-07-21T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是递归"><a href="#1-什么是递归" class="headerlink" title="1. 什么是递归"></a>1. 什么是递归</h3><ul><li>函数自己调用自己本身，或者在自己函数调用的下级函数中调用自己</li></ul><p>注意：使用递归函数要注意加上函数终止条件，避免进入死循环。</p><h3 id="2-案例"><a href="#2-案例" class="headerlink" title="2. 案例"></a>2. 案例</h3><h4 id="1-求1-2-3-…n的和"><a href="#1-求1-2-3-…n的和" class="headerlink" title="1. 求1,2,3,…n的和"></a>1. 求1,2,3,…n的和</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>( n == <span class="number">1</span> ) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">sum</span>(n-<span class="number">1</span>) + n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-求1-3-5-7-…第n项和前n项的和"><a href="#2-求1-3-5-7-…第n项和前n项的和" class="headerlink" title="2. 求1,3,5,7,…第n项和前n项的和"></a>2. 求1,3,5,7,…第n项和前n项的和</h4><ol><li>先求出第n项的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getN</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getN</span>(n-<span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>接着求前n项的和<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getN</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getN</span>(n-<span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getN</span>(n) + <span class="title function_">sum</span>(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-斐波那契数列"><a href="#3-斐波那契数列" class="headerlink" title="3. 斐波那契数列"></a>3. 斐波那契数列</h4><ul><li>1,1,2,3,5,8,13,21,34,55,89…求第 n 项 (后一项为前两项的和)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span> || n ==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fib</span>(n-<span class="number">1</span>) + <span class="title function_">fib</span>(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-求1-2-3-…到n的阶乘"><a href="#4-求1-2-3-…到n的阶乘" class="headerlink" title="4. 求1,2,3,…到n的阶乘"></a>4. 求1,2,3,…到n的阶乘</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>( n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">foo</span>(n - <span class="number">1</span>) * n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-求-n-的-m-幂次方"><a href="#5-求-n-的-m-幂次方" class="headerlink" title="5. 求 n 的 m 幂次方"></a>5. 求 n 的 m 幂次方</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">n,m</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">foo</span>(n,m-<span class="number">1</span>) * n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-使用递归实现深拷贝"><a href="#6-使用递归实现深拷贝" class="headerlink" title="6. 使用递归实现深拷贝"></a>6. 使用递归实现深拷贝</h4><ul><li>如果拷贝的时候, 将数据的所有引用结构都拷贝一份, 那么数据在内存中独立就是深拷贝(内存隔离,完全独立)</li><li>如果拷贝的时候, 只针对当前对象的属性进行拷贝, 而属性是引用类型这个不考虑, 那就是浅拷贝</li></ul><p>要实现深拷贝那么就需要考虑将对象的属性, 与属性的属性,都拷贝过来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = &#123;&#125;;<span class="comment">//创建一个新对象</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] == <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">            temp[key] = <span class="title function_">clone</span>(obj[key]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            temp[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-什么是递归&quot;&gt;&lt;a href=&quot;#1-什么是递归&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是递归&quot;&gt;&lt;/a&gt;1. 什么是递归&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数自己调用自己本身，或者在自己函数调用的下级函数中调用自己&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React最常用的Hook</title>
    <link href="http://example.com/2022/06/26/React%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84Hook/"/>
    <id>http://example.com/2022/06/26/React%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84Hook/</id>
    <published>2022-06-26T04:00:00.000Z</published>
    <updated>2022-06-26T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-什么是hook"><a href="#1-什么是hook" class="headerlink" title="1. 什么是hook"></a>1. 什么是hook</h4><p>hook是React 16.8新增的特性，专门用在函数式组件，它可以代替class组件中react的其他特性，是实际工作中要常用到的<br>hook是专门配合函数式组件开发使用的，可以用它代替class组件的一些生命周期，避免大量this引起的混乱，因此hook便于开发，且更易于让开发者理解代码</p><h4 id="2-useState"><a href="#2-useState" class="headerlink" title="2. useState"></a>2. useState</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,(useState) <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useState_Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);<span class="comment">//通过解构赋值，我们拿到的count、setCount</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>) <span class="comment">//setCount的回调中传进来的参数是count</span></span><br><span class="line">    &#125;</span><br><span class="line">    render (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span> = <span class="string">&#123;changeCount&#125;</span>&gt;</span>点我会使count+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>React.useState(0)相当于class组件中的this.state添加一个属性值,count相当于class组件中的this.state. count的值setCount可以用来修改count的值，可以相当于class组件中的this.setState</li></ul><h4 id="3-useEffect"><a href="#3-useEffect" class="headerlink" title="3. useEffect"></a>3. useEffect</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,(useState, useEffect) <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useState_Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);<span class="comment">//通过解构赋值，我们拿到的count、setCount</span></span><br><span class="line">    </span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//这个return是在该组件监测的数据变化时或者被卸载时调用的，被卸载时调用可以相当于componentWillUnmount钩子 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;该组件被卸载了&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [count])<span class="comment">//第二个参数传了[count]，表示检测count的更新变化，一旦count变化就会再次执行useEffect的回调</span></span><br><span class="line">                  <span class="comment">//第二个参数传了[],表示谁都不检测只执行一次useEffect的回调，相当于componentDidMount钩子</span></span><br><span class="line">                  <span class="comment">//第二个参数不传参，只要该组件有state变化就会执行useEffect的回调，相当于componentDidUpdate钩子</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count +<span class="number">1</span>) <span class="comment">//setCount的回调中传进来的参数是count</span></span><br><span class="line">    &#125;</span><br><span class="line">    render (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span> = <span class="string">&#123;changeCount&#125;</span>&gt;</span>点我会使count+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>useEffect的使用代替了在class组件中componentDidMoun、componentDidUpdate、componentWillUnmount的使用</li></ul><h4 id="4-使用hook需要注意的"><a href="#4-使用hook需要注意的" class="headerlink" title="4. 使用hook需要注意的"></a>4. 使用hook需要注意的</h4><h5 id="1-只在组件函数的最外层使用Hook，不要在循环，条件或嵌套函数中调用-Hook"><a href="#1-只在组件函数的最外层使用Hook，不要在循环，条件或嵌套函数中调用-Hook" class="headerlink" title="1. 只在组件函数的最外层使用Hook，不要在循环，条件或嵌套函数中调用 Hook"></a>1. 只在组件函数的最外层使用Hook，不要在循环，条件或嵌套函数中调用 Hook</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,(useEffect) <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useState_Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="comment">//这里才是正确的</span></span><br><span class="line">   <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//错误1，使用了条件判断</span></span><br><span class="line">   <span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//错误2，使用了循环</span></span><br><span class="line">   <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//错误3,使用了嵌套</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-不能在组件的函数外使用hook"><a href="#2-不能在组件的函数外使用hook" class="headerlink" title="2. 不能在组件的函数外使用hook"></a>2. 不能在组件的函数外使用hook</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,(useState, useEffect) <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">//错误1，在组件函数外使用了useState</span></span><br><span class="line"><span class="keyword">const</span> [variable, setVariable] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//错误2，在组件函数外使用了useEffect</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useState_Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="comment">//在组件函数里使用才是正确的</span></span><br><span class="line">   <span class="keyword">const</span> [variable, setVariable] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-什么是hook&quot;&gt;&lt;a href=&quot;#1-什么是hook&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是hook&quot;&gt;&lt;/a&gt;1. 什么是hook&lt;/h4&gt;&lt;p&gt;hook是React 16.8新增的特性，专门用在函数式组件，它可以代替clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用Node.js搭建自己的脚手架</title>
    <link href="http://example.com/2022/06/12/%E4%BD%BF%E7%94%A8Node.js%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>http://example.com/2022/06/12/%E4%BD%BF%E7%94%A8Node.js%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6/</id>
    <published>2022-06-12T04:00:00.000Z</published>
    <updated>2022-06-12T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-用到的工具"><a href="#1-用到的工具" class="headerlink" title="1. 用到的工具"></a>1. 用到的工具</h2><h4 id="Commander-命令行工具"><a href="#Commander-命令行工具" class="headerlink" title="Commander 命令行工具"></a>Commander 命令行工具</h4><h5 id="1-version-定义脚手架的版本"><a href="#1-version-定义脚手架的版本" class="headerlink" title="1. version 定义脚手架的版本"></a>1. version 定义脚手架的版本</h5><h5 id="2-command-添加命令行名称"><a href="#2-command-添加命令行名称" class="headerlink" title="2. command 添加命令行名称"></a>2. command 添加命令行名称</h5><ol><li>命令名称：后面可跟 &lt;&gt; 或 [ ] 包裹的参数，传入的参数会被传入到 action 回调函数中</li><li>命令描述：如果存在，且没有显示调用 action, 就会启动子命令程序，否则会报错</li><li>配置选项 &lt;可省略&gt;： 可配置 noHelp, isDefault 等</li></ol><h5 id="3-description-定义命令的描述"><a href="#3-description-定义命令的描述" class="headerlink" title="3. description 定义命令的描述"></a>3. description 定义命令的描述</h5><h5 id="4-action-定义命令的回调函数"><a href="#4-action-定义命令的回调函数" class="headerlink" title="4. action 定义命令的回调函数"></a>4. action 定义命令的回调函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">    .<span class="title function_">version</span>(_v, <span class="string">&#x27;-v, --version&#x27;</span>)</span><br><span class="line">    .<span class="title function_">command</span>(<span class="string">&#x27;list&#x27;</span>)</span><br><span class="line">    .<span class="title function_">description</span>(<span class="string">&#x27;查看所有可用的项目模板&#x27;</span>)</span><br><span class="line">    .<span class="title function_">action</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;chalk.green(<span class="string">&#x27;1. ReactAdmin&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;chalk.red(<span class="string">&#x27;2. ReactWeb&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;chalk.blue(<span class="string">&#x27;3. ReactH5&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="download-git-repo-模板下载工具"><a href="#download-git-repo-模板下载工具" class="headerlink" title="download-git-repo 模板下载工具"></a>download-git-repo 模板下载工具</h4><ol><li>这是用来下载远程模板的，支持 GitHub、 GitLab 和 Bitbucket 等<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> download = <span class="built_in">require</span>(<span class="string">&#x27;download-git-repo&#x27;</span>); <span class="comment">// 模板仓库下载工具</span></span><br><span class="line"><span class="title function_">download</span>(repository, destination, callback)</span><br><span class="line"><span class="comment">// repository 是远程仓库地址</span></span><br><span class="line"><span class="comment">// destination 是存放下载的文件路径，也可以直接写文件名，默认就是当前目录</span></span><br><span class="line"><span class="comment">// callback 下载之后的回调函数，接收一个参数</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="inquirer-命令行交互工具"><a href="#inquirer-命令行交互工具" class="headerlink" title="inquirer 命令行交互工具"></a>inquirer 命令行交互工具</h4><ol start="2"><li>这是个强大的交互式命令行工具,如果你想要和用户进行交互,那么你需要使用它,具体用法如下:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命令行交互</span></span><br><span class="line">inquirer.<span class="title function_">prompt</span>([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;请输入项目名称&#x27;</span>,</span><br><span class="line">        <span class="attr">default</span>: projectName</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;请输入项目简介&#x27;</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;请输入作者名称&#x27;</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//根据命令行答询结果修改package.json文件</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">`<span class="subst">$&#123;projectName&#125;</span>/package.json`</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="title function_">red</span>(<span class="string">&#x27;读取配置失败&#x27;</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> package = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data)</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(package, answers);</span><br><span class="line">        package = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(package, <span class="literal">null</span>, <span class="number">4</span>);</span><br><span class="line">        fs.<span class="title function_">writeFile</span>(<span class="string">`<span class="subst">$&#123;projectName&#125;</span>/package.json`</span>, package, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="title function_">red</span>(<span class="string">&#x27;修改配置失败&#x27;</span>));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="title function_">green</span>(<span class="string">&#x27;项目初始化成功&#x27;</span>))</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="ora-命令行加载进度标识"><a href="#ora-命令行加载进度标识" class="headerlink" title="ora 命令行加载进度标识"></a>ora 命令行加载进度标识</h4><ol start="3"><li>这是一个好看的加载，就是你下载的时候会有个转圈圈的那种效果，用法如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">&#x27;ora&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> spinner = <span class="title function_">ora</span>(<span class="string">&#x27;downloading template ...&#x27;</span>)</span><br><span class="line"><span class="comment">// spinner.start()</span></span><br><span class="line"><span class="comment">// spinner.fail(&#x27;项目模板下载失败&#x27;);</span></span><br><span class="line"><span class="comment">// spinner.succeed(&#x27;项目模板下载成功&#x27;);</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h4 id="chalk-命令行输出字符样式"><a href="#chalk-命令行输出字符样式" class="headerlink" title="chalk 命令行输出字符样式"></a>chalk 命令行输出字符样式</h4><ol start="4"><li>这是用来修改控制台输出内容样式的，比如颜色,加粗,字体背景色等等，具体用法如下:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="title function_">green</span>(<span class="string">&#x27;success&#x27;</span>));</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-脚手架项目搭建"><a href="#2-脚手架项目搭建" class="headerlink" title="2. 脚手架项目搭建"></a>2. 脚手架项目搭建</h2><ol><li>新建文件夹，npm init创建项目package.json文件</li><li>修改package.json文件的bin字段，设置脚手架的入口文件</li><li>新建入口文件index.js,在入口文件顶部添加代码#! &#x2F;usr&#x2F;bin&#x2F;env node,声明该命令行脚本是node.js写的</li><li>下载所需要的工具依赖包</li></ol><h2 id="3-设计指令"><a href="#3-设计指令" class="headerlink" title="3. 设计指令"></a>3. 设计指令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// my-cli -h                 //查看脚手架的配置项和具有的功能</span></span><br><span class="line"><span class="comment">// my-cli -v                 //查看脚手架版本号</span></span><br><span class="line"><span class="comment">// my-cli list               //查看脚手架可用的模板列表    </span></span><br><span class="line"><span class="comment">// my-cli init 模板名 项目名  //脚手架初始化模板项目</span></span><br></pre></td></tr></table></figure><h2 id="4-代码编写"><a href="#4-代码编写" class="headerlink" title="4. 代码编写"></a>4. 代码编写</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> program = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> ora = <span class="built_in">require</span>(<span class="string">&#x27;ora&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> download = <span class="built_in">require</span>(<span class="string">&#x27;download-git-repo&#x27;</span>); <span class="comment">// 模板仓库下载工具</span></span><br><span class="line"><span class="keyword">let</span> inquirer = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>)</span><br><span class="line"><span class="comment">// 取得包版本号</span></span><br><span class="line"><span class="keyword">let</span> _v = <span class="built_in">require</span>(<span class="string">&#x27;../package.json&#x27;</span>).<span class="property">version</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// my-cli -h                 //查看脚手架的配置项和具有的功能</span></span><br><span class="line"><span class="comment">// my-cli -v                 //查看脚手架版本号</span></span><br><span class="line"><span class="comment">// my-cli list               //查看脚手架可用的模板列表    </span></span><br><span class="line"><span class="comment">// my-cli init 模板名 项目名  //脚手架初始化模板项目</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> templates = &#123;</span><br><span class="line">    <span class="string">&#x27;ReactAdmin&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://github.com/RichardYZM/Templates-Cli&#x27;</span>,</span><br><span class="line">        <span class="attr">downloadUrl</span>: <span class="string">&#x27;RichardYZM/Templates-Cli#main&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;React模板&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;ReactWeb&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://github.com/RichardYZM/Templates-Cli&#x27;</span>,</span><br><span class="line">        <span class="attr">downloadUrl</span>: <span class="string">&#x27;RichardYZM/Templates-Cli#ReactWeb&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;React模板&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;ReactH5&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://github.com/RichardYZM/Templates-Cli&#x27;</span>,</span><br><span class="line">        <span class="attr">downloadUrl</span>: <span class="string">&#x27;RichardYZM/Templates-Cli#ReactH5&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;React模板&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">    .<span class="title function_">version</span>(_v, <span class="string">&#x27;-v, --version&#x27;</span>)</span><br><span class="line">    .<span class="title function_">command</span>(<span class="string">&#x27;list&#x27;</span>)</span><br><span class="line">    .<span class="title function_">description</span>(<span class="string">&#x27;查看所有可用的项目模板&#x27;</span>)</span><br><span class="line">    .<span class="title function_">action</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;chalk.green(<span class="string">&#x27;1. ReactAdmin&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;chalk.red(<span class="string">&#x27;2. ReactWeb&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;chalk.blue(<span class="string">&#x27;3. ReactH5&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">    .<span class="title function_">command</span>(<span class="string">&#x27;init &lt;template&gt; &lt;project&gt;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">description</span>(<span class="string">&#x27;项目初始化&#x27;</span>)</span><br><span class="line">    .<span class="title function_">action</span>(<span class="function">(<span class="params">templateName, projectName</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> spinner = <span class="title function_">ora</span>(<span class="string">&#x27;正在下载模板...&#x27;</span>).<span class="title function_">start</span>();</span><br><span class="line">        <span class="keyword">if</span> (!(templateName <span class="keyword">in</span> templates)) &#123;</span><br><span class="line">            spinner.<span class="title function_">fail</span>(chalk.<span class="title function_">red</span>(<span class="string">&#x27;下载模板出错,请输入正确的模板&#x27;</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> &#123; downloadUrl &#125; = templates[templateName];</span><br><span class="line">        <span class="comment">//github，项目名</span></span><br><span class="line">        <span class="title function_">download</span>(downloadUrl, projectName, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                spinner.<span class="title function_">fail</span>(chalk.<span class="title function_">red</span>(<span class="string">&#x27;下载模板出错&#x27;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                spinner.<span class="title function_">succeed</span>(chalk.<span class="title function_">green</span>(<span class="string">&#x27;下载模板成功&#x27;</span>));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//命令行交互</span></span><br><span class="line">                inquirer.<span class="title function_">prompt</span>([</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;请输入项目名称&#x27;</span>,</span><br><span class="line">                        <span class="attr">default</span>: projectName</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;请输入项目简介&#x27;</span>,</span><br><span class="line">                        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;请输入作者名称&#x27;</span>,</span><br><span class="line">                        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]).<span class="title function_">then</span>(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//根据命令行答询结果修改package.json文件</span></span><br><span class="line">                    fs.<span class="title function_">readFile</span>(<span class="string">`<span class="subst">$&#123;projectName&#125;</span>/package.json`</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="title function_">red</span>(<span class="string">&#x27;读取配置失败&#x27;</span>));</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">let</span> package = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data)</span><br><span class="line">                        <span class="title class_">Object</span>.<span class="title function_">assign</span>(package, answers);</span><br><span class="line">                        package = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(package, <span class="literal">null</span>, <span class="number">4</span>);</span><br><span class="line">                        fs.<span class="title function_">writeFile</span>(<span class="string">`<span class="subst">$&#123;projectName&#125;</span>/package.json`</span>, package, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="title function_">red</span>(<span class="string">&#x27;修改配置失败&#x27;</span>));</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="title function_">green</span>(<span class="string">&#x27;项目初始化成功&#x27;</span>))</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">program.<span class="title function_">parse</span>(process.<span class="property">argv</span>);  <span class="comment">// 解析命令行参数</span></span><br></pre></td></tr></table></figure><h2 id="5-上传至npm"><a href="#5-上传至npm" class="headerlink" title="5. 上传至npm"></a>5. 上传至npm</h2><ol><li>官网注册账号：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a> 注册后需查看邮箱信息，激活验证才可上传</li><li>切换npm地址：npm config set registry <a href="https://registry.npmjs.org/">https://registry.npmjs.org</a> （在安装了淘宝镜像的情况下）</li><li>登录：npm login（一般第五步，会提示输入账号）</li><li>发布包，上传到npm服务器：npm publish</li><li>删除npm包，后面是版本号：npm unpublish <a href="mailto:&#114;&#x69;&#99;&#x68;&#97;&#114;&#100;&#x2d;&#x63;&#108;&#x69;&#64;&#x31;&#x2e;&#x30;&#46;&#48;">&#114;&#x69;&#99;&#x68;&#97;&#114;&#100;&#x2d;&#x63;&#108;&#x69;&#64;&#x31;&#x2e;&#x30;&#46;&#48;</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-用到的工具&quot;&gt;&lt;a href=&quot;#1-用到的工具&quot; class=&quot;headerlink&quot; title=&quot;1. 用到的工具&quot;&gt;&lt;/a&gt;1. 用到的工具&lt;/h2&gt;&lt;h4 id=&quot;Commander-命令行工具&quot;&gt;&lt;a href=&quot;#Commander-命令行工具&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端实现@功能</title>
    <link href="http://example.com/2022/02/28/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0@%E5%8A%9F%E8%83%BD/"/>
    <id>http://example.com/2022/02/28/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0@%E5%8A%9F%E8%83%BD/</id>
    <published>2022-02-28T04:00:00.000Z</published>
    <updated>2022-02-28T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>键入 @ 后将选择框显示出来</li><li>点击选择框中的选项时，返回输入框</li><li>输入框中显示 @xxx</li><li>将光标定位在 @xxx 以后</li><li>删除 @xxx 时须要整个 @xxx 一块儿删除</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>主要是使用 selection 和 range 这两个关于选区对象和光标对象，结合div 的 contenteditable 属性实现</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>先有一个可编辑的 div 元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;atInput&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">contenteditable</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onKeyDown</span>=<span class="string">&quot;onKeyDown&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>输入 @ 时，弹出选人的框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入监听</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onKeyDown</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 如果触发 @</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">code</span> == <span class="string">&#x27;Digit2&#x27;</span> &amp;&amp; e.<span class="property">shiftKey</span>) &#123;</span><br><span class="line">    <span class="comment">// 打开选择弹窗</span></span><br><span class="line">    <span class="title function_">open</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>open方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开选择框</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">open</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> selection = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>()</span><br><span class="line">  <span class="keyword">const</span> range = selection?.<span class="title function_">getRangeAt</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="comment">// 缓存光标所在节点</span></span><br><span class="line">  state.<span class="property">focusNode</span> = selection.<span class="property">focusNode</span></span><br><span class="line">  <span class="comment">// 缓存光标所在节点位置</span></span><br><span class="line">  state.<span class="property">focusOffset</span> = selection.<span class="property">focusOffset</span></span><br><span class="line">  <span class="comment">// 显示选择框</span></span><br><span class="line">  state.<span class="property">visible</span> = <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 输入框失去焦点</span></span><br><span class="line">  <span class="keyword">let</span> atInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;atInput&#x27;</span>)</span><br><span class="line">  atInput.<span class="title function_">blur</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>选择好人之后, 删除输入的 @ 字符，将选择的人包装成一个标签，放在原先的 @ 的位置且让光标到标签的后方</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">onSelectSubmit</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> atInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;atInput&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> selection = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>();</span><br><span class="line">    <span class="keyword">let</span> range = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">getRangeAt</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//选中输入的@符号</span></span><br><span class="line">    range.<span class="title function_">setStart</span>(focusNode, focusOffset - <span class="number">1</span>);</span><br><span class="line">    range.<span class="title function_">setEnd</span>(focusNode, focusOffset);</span><br><span class="line">    <span class="comment">// //删除输入的@符号</span></span><br><span class="line">    range.<span class="title function_">deleteContents</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> spanNode1= <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> spanNode2 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    spanNode1.<span class="property">className</span> = <span class="string">&#x27;atFont&#x27;</span>;</span><br><span class="line">    spanNode1.<span class="property">innerHTML</span> = <span class="string">&#x27;@&#x27;</span> + s.<span class="property">nickName</span>;</span><br><span class="line">    spanNode1.<span class="property">contentEditable</span> = <span class="literal">false</span>;</span><br><span class="line">    spanNode2.<span class="property">innerHTML</span> = <span class="string">&#x27;&amp;nbsp;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> frag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>(),</span><br><span class="line">      node,</span><br><span class="line">      lastNode;</span><br><span class="line">    frag.<span class="title function_">appendChild</span>(spanNode1);</span><br><span class="line">    <span class="keyword">while</span> ((node = spanNode2.<span class="property">firstChild</span>)) &#123;</span><br><span class="line">      lastNode = frag.<span class="title function_">appendChild</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line">    range.<span class="title function_">insertNode</span>(frag);</span><br><span class="line">    selection.<span class="title function_">extend</span>(lastNode, <span class="number">1</span>);</span><br><span class="line">    selection.<span class="title function_">collapseToEnd</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除, 监听键盘的输入如果输入是 backSpace 则进行删除的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入监听</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">onKeyDown</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> atInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;atInput&#x27;</span>);</span><br><span class="line">     <span class="keyword">if</span> (e.<span class="property">code</span> == <span class="string">&#x27;Backspace&#x27;</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> range = selection.<span class="title function_">getRangeAt</span>(<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">var</span> removeNode = <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">if</span> (range.<span class="property">startOffset</span> &lt;= <span class="number">1</span> &amp;&amp; range.<span class="property">startContainer</span>.<span class="property">parentElement</span>.<span class="property">className</span> != <span class="string">&quot;atFont&quot;</span>)</span><br><span class="line">           removeNode = range.<span class="property">startContainer</span>.<span class="property">previousElementSibling</span>;</span><br><span class="line">       <span class="keyword">if</span> (range.<span class="property">startContainer</span>.<span class="property">parentElement</span>.<span class="property">className</span> == <span class="string">&quot;atFont&quot;</span>)</span><br><span class="line">           removeNode = range.<span class="property">startContainer</span>.<span class="property">parentElement</span>;</span><br><span class="line">       <span class="keyword">if</span> (removeNode)</span><br><span class="line">           atInput.<span class="title function_">removeChild</span>(removeNode);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><p>这样，我们的 @ 功能就基本做好了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;键入 @ 后将选择框显示出来&lt;/li&gt;
&lt;li&gt;点击选择框中的选项时，返回输入框&lt;/li&gt;
&lt;li&gt;输入框中显示 @xxx&lt;/l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Promise解决回调地狱</title>
    <link href="http://example.com/2022/02/20/Promise%E8%A7%A3%E5%86%B3%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1/"/>
    <id>http://example.com/2022/02/20/Promise%E8%A7%A3%E5%86%B3%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1/</id>
    <published>2022-02-20T04:00:00.000Z</published>
    <updated>2022-02-20T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>当一个函数作为参数传入另一个参数中，并且它不会立即执行，只有当满足一定条件后该函数才可以执行，这种函数就称为回调函数。我们熟悉的定时器和Ajax中就存在有回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不讲武德&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(show,<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>这里的回调函数是show()，在满足时间5秒后执行</p><h3 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h3><p>同步操作在主线程上排队执行,只有将上一个任务执行完后,才能进行下一步操作.异步任务不进入主线程，而是进入异步队列，前一个任务是否执行完毕不影响下一个任务的执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123456</span>); <span class="comment">//后输出</span></span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11111</span>) <span class="comment">//先输出</span></span><br></pre></td></tr></table></figure><h3 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h3><p>如果我们想按照这样的顺序请求接口,data成功后,请求data1的接口,data1接口成功后请求data2接口,为了保证请求顺序不出错,我们只能这样进行嵌套</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">           <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/data&#x27;</span>,</span><br><span class="line">           <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">               $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                   <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/data1&#x27;</span>,</span><br><span class="line">                   <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                       <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">                       $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                           <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/data2&#x27;</span>,</span><br><span class="line">                           <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                               <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><p>代码中的回调函数套回调函数，居然套了3层，这种回调函数中嵌套回调函数的情况就叫做 回调地狱 。</p><p>总结一下，回调地狱就是为是实现代码顺序执行而出现的一种操作，它会造成我们的代码可读性非常差，后期不好维护</p><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>Promise是js中的一个原生对象，是一种异步编程的解决方案，可以替换掉传统的回调函数解决方案。</p><ul><li>Promise构造函数接收一个函数作为参数，我们需要处理的异步任务就卸载该函数体内，该函数的两个参数是resolve，reject。异步任务执行成功时调用resolve函数返回结果，反之调用reject。</li><li>Promise对象的then方法用来接收处理成功时响应的数据，catch方法用来接收处理失败时相应的数据。</li><li>Promise的链式编程可以保证代码的执行顺序，前提是每一次在than做完处理后，一定要return一个Promise对象，这样才能在下一次than时接收到数据<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本Promise对象发送ajax请求</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params">url</span>)&#123;</span><br><span class="line">            <span class="comment">// 创建一个promise 实例</span></span><br><span class="line">            <span class="keyword">var</span> p=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">                <span class="comment">// 异步操作 原生ajax</span></span><br><span class="line">                <span class="keyword">var</span> xhr=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">                xhr.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (xhr.<span class="property">readyState</span>!=<span class="number">4</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xhr.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span>==<span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="comment">// 处理正常的请求</span></span><br><span class="line">                        <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">// 处理异常请求</span></span><br><span class="line">                        <span class="title function_">reject</span>(<span class="string">&#x27;服务端异常错误&#x27;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,url)</span><br><span class="line">                xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在then方法中  可以使用return 数据  而不是 Promise对象</span></span><br><span class="line">        <span class="comment">// then方法 得到异步任务正确的结果</span></span><br><span class="line">        <span class="title function_">queryData</span>(<span class="string">&#x27;http://localhost:3000/data&#x27;</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">queryData</span>(<span class="string">&#x27;http://localhost:3000/data1&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">queryData</span>(<span class="string">&#x27;http://localhost:3000/data2&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;回调函数&quot;&gt;&lt;a href=&quot;#回调函数&quot; class=&quot;headerlink&quot; title=&quot;回调函数&quot;&gt;&lt;/a&gt;回调函数&lt;/h3&gt;&lt;p&gt;当一个函数作为参数传入另一个参数中，并且它不会立即执行，只有当满足一定条件后该函数才可以执行，这种函数就称为回调函数。我们熟</summary>
      
    
    
    
    
  </entry>
  
</feed>
